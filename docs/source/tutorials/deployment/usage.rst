=====
Usage
=====

Create playbook
===============

Create a new playbook file. This can be directly in ``websauna.ansible`` root folder. In this example we call the file ``playbook-myapp.yml``

.. code-block:: yaml

    # Playbook which ramps up myapp tutorial site inside a Vagrant virtual machine

    - hosts: myapp_production
      gather_facts: true

      # These need to be set up before reading default.yml - more variables are generated based on these
      vars:
        - package_name: myapp
        - site_id: myapp
        - websocket: on
        - smtp: off
        - ssl: off
        - cloudflare: off
        - new_relic: off
        - letsenrypt: off
        - firewall: on
        - backup: off
        - git_repository: git@github.com:websauna/myapp.git
        - git_branch: master
        - site_mode: production
        - ini_secrets_file: production-secrets.ini   # This file is generated by scaffold
        - server_name: myapp.example.com
        - server_email_domain: example.com
        - server_email: no-reply@example.com
        - notify_email: mikko@example.com

      pre_tasks:

        # Load default vars based on playbook.yml input
        - include_vars: default.yml
          tags: site, smtp

        # Load default vars based on playbook.yml input
        - include_vars: secrets.yml
          tags: site, smtp

      roles:
      - websauna.preflight
      - websauna.users
      - websauna.ssh
      - websauna.shell
      - websauna.harden
      - websauna.smtp
      - { role: ANXS.perl, become: yes, become_user: root }  # Needed for logwatch
      - { role: ANXS.cron, become: yes, become_user: root }  # Needed for logwatch
      - { role: ANXS.postgresql, become: yes, become_user: root, tags: ['psql'] }
      - { role: ANXS.logwatch, become: yes, become_user: root }
      - { role: Stouts.nginx, become: yes, become_user: root }
      - { role: Stouts.redis, become: yes, become_user: root }
      - { role: Stouts.python, become: yes, become_user: root }
      - websauna.site
      - websauna.postflight

Production secrets
------------------

Besides having the deployment :ref:`secrets` in Ansible vault locally, the running Python code may need to know some secret tokens, like API keys. An empty ``production-secrets.ini`` for these is generated by :ref:`scaffold`. You can copy this file over and start filling in information there when needed.

Create hosts inventory
======================

Ansible inventory file tells what servers are available for the deployment. In our playbook we use a hosts inventory file called ``hosts.ini`` for the inventory.

Create a ``hosts.ini`` file. This can be directly in ``websauna.ansible`` root folder. Place the following in the file. This example is for :ref:`Amazon EC2 <ec2>` server:

.. code-block:: ini

    [default]
    myapp_production ansible_ssh_host=1.2.3.4 ansible_ssh_user=ubuntu www_ip=172.1.2.3

For each server the information you need in this point is:

* ``ansible_ssh_host``: :term:`SSH` IP address your server is listening to.

* ``www_ip``: IP address your where server accepts HTTP/HTTPS connections. For :ref:`Amazon EC2 <ec2>` server these two are different.

* ``ansible_ssh_user``: What is the UNIX username SSH uses to log in. This user must have term:`sudo`: access.

* Make sure your hosting provider has firewall open for inbound SSH, HTTP and HTTPS ports.

SSH agent forwarding
====================

SSH agent forwarding enables the remote server to use your local SSH credentials. This is required e.g. from Ansible to access private Github repositories from the remote server.

You need to `enable SSH agent forwarding <https://opensourcehacker.com/2012/10/24/ssh-key-and-passwordless-login-basics-for-developers/>`_, so that Ansible uses your locally configured SSH key. With this setup, the server never stores any private keys and they are safely on your own computer. Ansible uses SSH agent to make remote connections from the server to e.g. a Github to fetch source code of your application.

You can add any number of keys. The keys

* Should allow you to connect to your server (hosting provider, like Amazon EC2 key)

* Should allow you to check out source code from your repository for the deployment (Github, Bitbucket keys)

Usually the command to add a key into a SSH agent is along the lines::

    ssh-add ~/.ssh/my_ssh_private_key_for_deployment

Likewise, `you need to have set up your public key on your Git repository service like Github <https://help.github.com/articles/generating-ssh-keys/>`_.

Run playbook
============

Make sure Ansible specific virtual environment is activated. Run from command line:

.. code-block:: console

    ansible-playbook -i hosts.ini playbook-myapp.yml

Update runs
===========

For subsequent playbook runs: If your server configuration has not changed, and you need to only update application files and migrations, instead of building the server from a scratch, you can use ``site`` tag to run tasks specific to this::

     ansible-playbook -i hosts.ini playbook-myapp.yml -t site

This considerably cuts down playbook execution time.

Playbook variables
==================

See :ref:`playbook variables reference <playbook-vars>` for a detailed list of supported variables by *websauna.ansible*.
